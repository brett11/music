require 'rails_helper'
require_relative '../support/shared_examples'

RSpec.describe UsersController, type: :controller do
  #https://relishapp.com/rspec/rspec-rails/v/2-99/docs/controller-specs/use-of-capybara-in-controller-specs
  #include Capybara::DSL
  #below needed so that @users will be assigned within controller to something, be non-nil, and pass GET index works be_present test
  before(:example) do
    @user = FactoryGirl.create(:user)
  end

  describe "GET index" do
    describe "before user login" do
      it "redirects to login path and shows login flash" do
        get :index
        #http://stackoverflow.com/questions/5228371/how-to-get-current-path-with-query-string-using-capybara
        #expect(page).to have_current_path(root_path)
        expect(response).to redirect_to(:login)
        #flash generated by logged_in_user helper
        expect(flash[:danger]).to eq("Please log in.")
      end
    end

    describe "after user login" do
      before(:example) do
        login(@user)
      end

      it_behaves_like "successful get request", :index, :users
    end
  end

  describe "GET new" do
    it "is a successful signup request which assigns a blank user instance variable" do
      get :new
      expect(response).to have_http_status(:success)
      expect(response).to render_template(:new)
      #pg 57 of Rails book
      expect(assigns(:user)).to be_present
    end
  end

  describe "POST create" do
    it "redirects to root_url upon successful user creation and shows flash" do
      new_user_params = FactoryGirl.attributes_for(:user)
      post :create, params: {user: new_user_params}
      expect(assigns(:user)).to be_present
      #pg 57 of Rails testing book
      expect(response).to redirect_to(:root)
      #pg 143 of Rails testing book
      expect(flash[:info]).to eq("Please check your email to activate your account.")
    end

    it "renders signup upon user creation failure" do
      #posting below with password_confirmation that doesn't match
      post :create, params: {user: {name_first: 'Bob', name_last: 'Smith', email:'foo@bar.com', password:'foo', password_confirmation: 'bar'} }
      #pg 141 of Rails testing book
      expect(response).to render_template(:new)
    end
  end

  describe "GET edit" do
    describe "before user login" do
      it "does not work" do
        get :edit, params: {id: @user.id }
        expect(assigns(:user)).to_not be_present
        expect(response).to redirect_to(:login)
      end
    end

    describe "after login" do
      before(:example) do
        login(@user)
      end

      it "does work" do
        get :edit, params: {id: @user.id }
        expect(assigns(:user)).to be_present
        expect(response).to render_template(:edit)
      end
    end
  end

  describe "POST update" do
    describe "before user login" do
      it "does not allow" do
        post :update, params: {id: @user.id, user: {password: "foobar2", password_confirmation: "foobar2"}}
        expect(assigns(:user)).to_not be_present
        expect(response).to redirect_to(:login)
      end
    end

    describe"after user login" do
      before(:example) do
        login(@user)
      end

      it "redirects to albums_url upon successful creation and shows flash" do
        post :update, params: {id: @user.id, user: {password: "foobar2", password_confirmation: "foobar2"}}
        expect(assigns(:user)).to be_present
        #pg 57 of Rails testing book
        expect(response).to redirect_to(@user)
        #pg 143 of Rails testing book
        expect(flash[:success]).to eq("Profile updated")
      end

      it "renders edit upon update failure" do
        #posting below without name, which will cause failure of update
        #binding.pry
        post :update, params: {id: @user.id, user: {password: "foo", password_confirmation: "bar"}}
        #pg 141 of Rails testing book
        expect(response).to render_template(:edit)
      end
    end
  end

  describe "GET following" do
    # @artist = FactoryGirl.create(:artist)

    describe "when not logged in" do
      it "does not work" do
        get :following, params: { id: @user.id }
        expect(response).to redirect_to(:login)
      end
    end

    describe "when logged in" do
      before(:example) do
        login(@user)
      end

      it "does work" do
        get :following, params: { id: @user.id }
        expect(response).to have_http_status(:success)
        expect(response).to render_template(:show_follow)
      end
    end
  end
end
